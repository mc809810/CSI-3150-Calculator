{"ast":null,"code":"const calculator = {\n  displayValue: \"0\",\n  firstOperand: null,\n  waitingForSecondOperand: false,\n  operator: null\n};\nfunction inputDigit(digit) {\n  const {\n    displayValue,\n    waitingForSecondOperand\n  } = calculator;\n  if (waitingForSecondOperand === true) {\n    calculator.displayValue = digit;\n    calculator.waitingForSecondOperand = false;\n  } else {\n    // Overwrite `displayValue` if the current value is '0' otherwise append to it\n    calculator.displayValue = displayValue === \"0\" ? digit : displayValue + digit;\n  }\n\n  // for debugging\n  console.log(calculator);\n}\nfunction inputDecimal(dot) {\n  if (calculator.waitingForSecondOperand === true) {\n    calculator.displayValue = \"0.\";\n    calculator.waitingForSecondOperand = false;\n    return;\n  }\n\n  // execute only if there is no existing decimal point\n  if (!calculator.displayValue.includes(dot)) {\n    // append decimal point to the string\n    calculator.displayValue += dot;\n  }\n}\nfunction handleOperator(nextOperator) {\n  // unpack the calculator object literal\n  const {\n    firstOperand,\n    displayValue,\n    operator\n  } = calculator;\n\n  // convert the string value to floating point\n  const inputValue = parseFloat(displayValue);\n  console.log(`HERE ${inputValue}`);\n  if (operator && calculator.waitingForSecondOperand) {\n    calculator.operator = nextOperator;\n    console.log(calculator);\n    return;\n  }\n\n  // if firstOperand is null and input is valid update the key:value pair\n  if (firstOperand == null && !isNaN(inputValue)) {\n    calculator.firstOperand = inputValue;\n  } else if (operator) {\n    console.log(`inside computations`);\n    const result = calculate(firstOperand, inputValue, operator);\n    console.log(`result is ${result}`);\n\n    // calculator.displayValue = String(result);\n    calculator.displayValue = `${parseFloat(result.toFixed(7))}`;\n    calculator.firstOperand = result;\n  }\n  calculator.waitingForSecondOperand = true;\n  calculator.operator = nextOperator;\n\n  //for debugging\n  console.log(calculator);\n}\nfunction calculate(firstOperand, secondOperand, operator) {\n  switch (operator) {\n    case \"+\":\n      return firstOperand + secondOperand;\n      break;\n    case \"-\":\n      return firstOperand - secondOperand;\n      break;\n    case \"*\":\n      return firstOperand * secondOperand;\n      break;\n    case \"/\":\n      return firstOperand / secondOperand;\n      break;\n    default:\n      console.log(\"incorrect operator !!\");\n      break;\n  }\n  return secondOperand;\n}\n\n// Update the display area of the calculator\nfunction updateDisplay() {\n  console.log(`INSIDE UPDATE DISPLAY ()`);\n  console.log(`current display value is ${calculator.displayValue}`);\n  // select html element for display and store it in a variable\n  const display = document.querySelector(\".calculator-screen\");\n  //   Set the value of this element with value stored in calculator.displayValue\n  display.value = calculator.displayValue;\n}\nconst keys = document.querySelector(\".calculator-keys\");\nkeys.addEventListener(\"click\", e => {\n  const {\n    target\n  } = e;\n  const {\n    value\n  } = target;\n  if (!target.matches(\"button\")) {\n    return;\n  }\n  switch (value) {\n    case \"+\":\n    case \"-\":\n    case \"*\":\n    case \"/\":\n    case \"=\":\n      handleOperator(value);\n      break;\n    case \".\":\n      inputDecimal(value);\n      break;\n    case \"all-clear\":\n      resetCalculator();\n      break;\n    default:\n      // check if the key is an integer\n      if (Number.isInteger(parseFloat(value))) {\n        inputDigit(value);\n      }\n  }\n  updateDisplay();\n});\nfunction resetCalculator() {\n  calculator.displayValue = \"0\";\n  calculator.firstOperand = null;\n  calculator.waitingForSecondOperand = false;\n  calculator.operator = null;\n  console.log(calculator);\n}","map":{"version":3,"names":["calculator","displayValue","firstOperand","waitingForSecondOperand","operator","inputDigit","digit","console","log","inputDecimal","dot","includes","handleOperator","nextOperator","inputValue","parseFloat","isNaN","result","calculate","toFixed","secondOperand","updateDisplay","display","document","querySelector","value","keys","addEventListener","e","target","matches","resetCalculator","Number","isInteger"],"sources":["/Users/MC/Documents/Calculator/Calc/src/App.js"],"sourcesContent":["const calculator = {\n  displayValue: \"0\",\n  firstOperand: null,\n  waitingForSecondOperand: false,\n  operator: null,\n};\n\nfunction inputDigit(digit) {\n  const { displayValue, waitingForSecondOperand } = calculator;\n\n  if (waitingForSecondOperand === true) {\n    calculator.displayValue = digit;\n    calculator.waitingForSecondOperand = false;\n  } else {\n    // Overwrite `displayValue` if the current value is '0' otherwise append to it\n    calculator.displayValue =\n      displayValue === \"0\" ? digit : displayValue + digit;\n  }\n\n  // for debugging\n  console.log(calculator);\n}\n\nfunction inputDecimal(dot) {\n  if (calculator.waitingForSecondOperand === true) {\n    calculator.displayValue = \"0.\";\n    calculator.waitingForSecondOperand = false;\n    return;\n  }\n\n  // execute only if there is no existing decimal point\n  if (!calculator.displayValue.includes(dot)) {\n    // append decimal point to the string\n    calculator.displayValue += dot;\n  }\n}\n\nfunction handleOperator(nextOperator) {\n  // unpack the calculator object literal\n  const { firstOperand, displayValue, operator } = calculator;\n\n  // convert the string value to floating point\n  const inputValue = parseFloat(displayValue);\n  console.log(`HERE ${inputValue}`);\n\n  if (operator && calculator.waitingForSecondOperand) {\n    calculator.operator = nextOperator;\n    console.log(calculator);\n    return;\n  }\n\n  // if firstOperand is null and input is valid update the key:value pair\n  if (firstOperand == null && !isNaN(inputValue)) {\n    calculator.firstOperand = inputValue;\n  } else if (operator) {\n    console.log(`inside computations`);\n    const result = calculate(firstOperand, inputValue, operator);\n    console.log(`result is ${result}`);\n\n    // calculator.displayValue = String(result);\n    calculator.displayValue = `${parseFloat(result.toFixed(7))}`;\n    calculator.firstOperand = result;\n  }\n\n  calculator.waitingForSecondOperand = true;\n  calculator.operator = nextOperator;\n\n  //for debugging\n  console.log(calculator);\n}\n\nfunction calculate(firstOperand, secondOperand, operator) {\n  switch (operator) {\n    case \"+\":\n      return firstOperand + secondOperand;\n      break;\n    case \"-\":\n      return firstOperand - secondOperand;\n      break;\n    case \"*\":\n      return firstOperand * secondOperand;\n      break;\n    case \"/\":\n      return firstOperand / secondOperand;\n      break;\n\n    default:\n      console.log(\"incorrect operator !!\");\n      break;\n  }\n  return secondOperand;\n}\n\n// Update the display area of the calculator\nfunction updateDisplay() {\n  console.log(`INSIDE UPDATE DISPLAY ()`);\n  console.log(`current display value is ${calculator.displayValue}`);\n  // select html element for display and store it in a variable\n  const display = document.querySelector(\".calculator-screen\");\n  //   Set the value of this element with value stored in calculator.displayValue\n  display.value = calculator.displayValue;\n}\n\nconst keys = document.querySelector(\".calculator-keys\");\n\nkeys.addEventListener(\"click\", (e) => {\n  const { target } = e;\n  const { value } = target;\n  if (!target.matches(\"button\")) {\n    return;\n  }\n\n  switch (value) {\n    case \"+\":\n    case \"-\":\n    case \"*\":\n    case \"/\":\n    case \"=\":\n      handleOperator(value);\n      break;\n    case \".\":\n      inputDecimal(value);\n      break;\n    case \"all-clear\":\n      resetCalculator();\n      break;\n    default:\n      // check if the key is an integer\n      if (Number.isInteger(parseFloat(value))) {\n        inputDigit(value);\n      }\n  }\n\n  updateDisplay();\n});\n\nfunction resetCalculator() {\n  calculator.displayValue = \"0\";\n  calculator.firstOperand = null;\n  calculator.waitingForSecondOperand = false;\n  calculator.operator = null;\n  console.log(calculator);\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}